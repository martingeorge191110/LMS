// This is your Prisma schema file,
// Learn more at https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Degree {
  BACHELOR
  DIPLOMA
  ASSOCIATE
  MASTER
  DOCTORATE
  CERTIFICATE
}

enum Role {
  STUDENT
  INSTRUCTOR
}

enum Gender {
  MALE
  FEMALE
}

model User {
  id                String        @id @default(uuid())
  firstName         String
  lastName          String
  email             String        @unique
  password          String
  country           String?
  phone             String?       @unique
  age               Int?
  gender            Gender?
  birthDate         DateTime?
  role              Role?         @default(STUDENT)
  title             String?
  avatar            String?
  bio               String?
  genCode           Int           @default(000000)
  expCode           DateTime?
  isProfileComplete Boolean       @default(false)
  isAdmin           Boolean       @default(false)
  isInstructor      Boolean       @default(false)
  isOnline          Boolean       @default(false)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  certificates      Certificate[]
  educations        Education[]
  links             Link[]
  instructor        Instructor?
  courses           Course[]      @relation("enrolled")
}

model Instructor {
  id                String   @id @default(uuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  description       String?
  specialize        String?
  yearsOfExperience Int?
  courses           Course[] @relation("teaching")
}

model Education {
  id          String    @id @default(uuid())
  entity      String
  startDate   DateTime
  endDate     DateTime?
  active      Boolean?  @default(true)
  degree      Degree
  major       String
  description String
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Certificate {
  id          String   @id @default(uuid())
  entity      String
  date        DateTime
  major       String
  description String
  avatar      String?
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Link {
  id          String  @id @default(uuid())
  website     String
  link        String
  description String?
  userId      String
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Course {
  id           String     @id @default(uuid())
  name         String
  instructorId String
  instructor   Instructor @relation("teaching", fields: [instructorId], references: [id], onDelete: Cascade)
  students     User[]     @relation("enrolled")
}
