// This is your Prisma schema file,
// Learn more at https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Degree {
  BACHELOR
  DIPLOMA
  ASSOCIATE
  MASTER
  DOCTORATE
  CERTIFICATE
}

enum Role {
  STUDENT
  INSTRUCTOR
}

enum Gender {
  MALE
  FEMALE
}

enum Level {
  BEGINNER
  INTERMIDATE
  ADVANCED
}

enum ChatType {
  PERSONEL
  GROUP
}

enum PostMediaType {
  IMG
  VIDEO
  FILE
}

model User {
  id                String         @id @default(uuid())
  firstName         String
  lastName          String
  email             String         @unique
  password          String
  country           String?
  phone             String?        @unique
  age               Int?
  gender            Gender?
  birthDate         DateTime?
  role              Role?          @default(STUDENT)
  title             String?
  avatar            String?
  bio               String?
  genCode           Int            @default(000000)
  expCode           DateTime?
  isProfileComplete Boolean        @default(false)
  isAdmin           Boolean        @default(false)
  isInstructor      Boolean        @default(false)
  isOnline          Boolean        @default(false)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  certificates      Certificate[]
  educations        Education[]
  links             Link[]
  instructor        Instructor?
  courses           Course[]       @relation("enrolled")
  comments          CourseReview[] @relation("review")
  chats             Chat[]         @relation("chatParts")
  messages          Messages[]     @relation("messageSender")
  seenMessages      SeenBy[]       @relation("userSeenBy")
  userlikesReviews  CourseReview[] @relation("likeReview")
  userPostsComments PostComment[]  @relation("writeComment")
  userPosts         Post[]
  userLiksPosts     Post[]         @relation("likePost")
  userLikesComments PostComment[]  @relation("likeComment")
  chatadmin         Chat[]         @relation("chatAdmin")
}

model Instructor {
  id                String   @id @default(uuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  description       String?
  specialize        String?
  yearsOfExperience Int?
  courses           Course[] @relation("teaching")
}

model Education {
  id          String    @id @default(uuid())
  entity      String
  startDate   DateTime
  endDate     DateTime?
  active      Boolean?  @default(true)
  degree      Degree
  major       String
  description String
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Certificate {
  id          String   @id @default(uuid())
  entity      String
  date        DateTime
  major       String
  description String
  avatar      String?
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Link {
  id          String  @id @default(uuid())
  website     String
  link        String
  description String?
  userId      String
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Course {
  id          String         @id @default(uuid())
  name        String
  majority    String
  specialze   String
  description String
  content     String
  videoIntro  String?
  duration    Int // number of hours
  isPublished Boolean        @default(false)
  videoCount  Int
  language    String
  level       Level
  price       Float
  startDate   DateTime
  endDate     DateTime?
  rating      Float
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  instructor  Instructor[]   @relation("teaching")
  students    User[]         @relation("enrolled")
  review      CourseReview[]
  courseLecs  CourseLecs[]   @relation("CourseLectures")
}

model CourseLecs {
  id       String @id @default(uuid())
  courseId String
  course   Course @relation("CourseLectures", fields: [courseId], references: [id], onDelete: Cascade)
}

model CourseReview {
  id         String @id @default(uuid())
  comment    String
  rating     Float?
  likes      Int    @default(0)
  usersLikes User[] @relation("likeReview")
  userId     String
  user       User   @relation("review", fields: [userId], references: [id], onDelete: Cascade)
  courseId   String
  course     Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Chat {
  id           String     @id @default(uuid())
  name         String
  bio          String
  chatCategory ChatType   @default(PERSONEL)
  participants User[]     @relation("chatParts")
  admins       User[]     @relation("chatAdmin")
  messages     Messages[] @relation("chatRoom")
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Messages {
  id           String         @id @default(uuid())
  senderId     String
  message      String
  user         User           @relation("messageSender", fields: [senderId], references: [id], onDelete: Cascade)
  chatId       String
  chat         Chat           @relation("chatRoom", fields: [chatId], references: [id], onDelete: Cascade)
  date         DateTime       @default(now())
  seenBy       SeenBy[]       @relation("messageSeenBy")
  MessageMedia MessageMedia[]
}

model MessageMedia {
  id        String        @id @default(uuid())
  type      PostMediaType
  mediaUrl  String
  messageId String
  message   Messages      @relation(fields: [messageId], references: [id], onDelete: Cascade)
}

model SeenBy {
  id        String   @id @default(uuid())
  messageId String
  userId    String
  date      DateTime @default(now())
  message   Messages @relation("messageSeenBy", fields: [messageId], references: [id], onDelete: Cascade)
  user      User     @relation("userSeenBy", fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
  id        String        @id @default(uuid())
  userId    String
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  content   String        @default("")
  likes     Int           @default(0)
  usersLiks User[]        @relation("likePost")
  comments  PostComment[]
  media     PostMedia[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model PostMedia {
  id       String        @id @default(uuid())
  mediaUrl String
  type     PostMediaType
  postId   String
  post     Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model PostComment {
  id        String         @id @default(uuid())
  content   String         @default("")
  userId    String
  user      User           @relation("writeComment", fields: [userId], references: [id], onDelete: Cascade)
  media     PostComMedia[]
  likes     Int            @default(0)
  postId    String
  post      Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  usersLiks User[]         @relation("likeComment")
}

model PostComMedia {
  id        String        @id @default(uuid())
  mediaUrl  String
  type      PostMediaType
  commentId String
  comment   PostComment   @relation(fields: [commentId], references: [id], onDelete: Cascade)
}
